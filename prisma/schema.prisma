// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// done
model Squad {
    id                   Int                   @id @default(autoincrement())
    name                 String
    gsName               String
    description          String
    imageUrl             String
    positions            Position[]
    statuses             Status[]
    enterpriseObjectives EnterpriseObjective[] // for the future
    SquadObjectives      SquadObjective[]
    goals                Goal[]
    steps                Step[]
}

// done
model User {
    id                   Int                   @id @default(autoincrement())
    email                String                @unique
    password             String
    phoneNumber          String                @unique
    firstName            String
    lastName             String
    additionalEmail      String?               @unique
    middleName           String?
    arabicFullName       String?
    appointlet           String?
    bio                  String?
    gsStatus             GsStatus              @default(ACTIVE)
    joinDate             DateTime              @default(now())
    positions             PositionUser[]
    comments             Comment[]
    requests             Request[]
    assignedTasks        Task[]                @relation("assignedBy")
    assignedToTasks      Task[]                @relation("assignedTo")
    doneEvaluations      Evaluation[]
    enterpriseObjectives EnterpriseObjective[] // for the future
    SquadObjectives      SquadObjective[]
    goals                Goal[]
    steps                Step[]
}
//done
model Position {
    id           Int                  @id @default(autoincrement())
    name         String
    gsName       String
    weeklyHours  Int
    gsLevel      GsLevel
    squadId      Int
    squad        Squad                @relation(fields: [squadId], references: [id])
    users        PositionUser[]
    competencies PositionCompetency[]
    vacancies    Vacancy[]

    @@index([squadId])
}

model Request {
    id          Int    @id @default(autoincrement())
    userId      Int
    user        User   @relation(fields: [userId], references: [id])
    requestType String
    reason      String
    status      String

    @@index([userId])
}
//done
model PositionUser {
    id          Int          @id @default(autoincrement())
    positionId  Int
    position    Position     @relation(fields: [positionId], references: [id])
    userId      Int
    user        User         @relation(fields: [userId], references: [id])
    startDate   DateTime
    endDate     DateTime
    evaluations Evaluation[]

    @@index([userId])
    @@index([positionId])
}
// done
model Competency {
    id          Int                  @id @default(autoincrement())
    name        String
    description String?
    positions   PositionCompetency[]
}

model PositionCompetency {
    id           Int          @id @default(autoincrement())
    weight       Int
    competencyId Int
    competency   Competency   @relation(fields: [competencyId], references: [id])
    positionId   Int
    position     Position     @relation(fields: [positionId], references: [id])
    evaluations  Evaluation[]

    @@index([competencyId])
    @@index([positionId])
}

//done
model Evaluation {
    id           Int                @id @default(autoincrement())
    userId       Int
    user         PositionUser       @relation(fields: [userId], references: [id])
    competencyId Int
    competency   PositionCompetency @relation(fields: [competencyId], references: [id])
    text         String
    mark         String?
    evaluatorId  Int
    evaluator    User               @relation(fields: [evaluatorId], references: [id])
    date         DateTime

    @@index([userId])
    @@index([competencyId])
    @@index([evaluatorId])
}
//done
model Vacancy {
    id           Int               @id @default(autoincrement())
    positionId   Int
    position     Position          @relation(fields: [positionId], references: [id])
    isOpen       Boolean           @default(true)
    effect       String
    brief        String
    tasks        String
    required     String
    preferred    String?
    applications Application[]
    questions    VacancyQuestion[]

    @@index([positionId])
}
// done
model Application {
    id        Int                   @id @default(autoincrement())
    vacancyId Int
    vacancy   Vacancy               @relation(fields: [vacancyId], references: [id])
    status    RecruitmentStatus
    feedbacks RecruitmentFeedback[]
    answers   Answer[]

    @@index([vacancyId])
}
// done
model RecruitmentFeedback {
    id            Int               @id @default(autoincrement())
    applicationId Int
    application   Application       @relation(fields: [applicationId], references: [id])
    type          RecruitmentStatus
    text          String

    @@index([applicationId])
}

// done
model Question {
    id        Int               @id @default(autoincrement())
    text      String
    type      QuestionType
    positions VacancyQuestion[]
}

model VacancyQuestion {
    id         Int      @id @default(autoincrement())
    questionId Int
    quetion    Question @relation(fields: [questionId], references: [id])
    vacancyId  Int
    vacancy    Vacancy  @relation(fields: [vacancyId], references: [id])
    answers    Answer[]

    @@index([questionId])
    @@index([vacancyId])
}

model Answer {
    id            Int             @id @default(autoincrement())
    applicationId Int
    application   Application     @relation(fields: [applicationId], references: [id])
    questionId    Int
    questions     VacancyQuestion @relation(fields: [questionId], references: [id])

    @@index([applicationId])
    @@index([questionId])
}
// done
model Status {
    id      Int     @id @default(autoincrement())
    name    String
    crucial Boolean @default(false)
    squadId Int
    squad   Squad   @relation(fields: [squadId], references: [id])
    tasks   Task[]

    @@index([squadId])
}

// done
model Task {
    id           Int        @id @default(autoincrement())
    title        String
    description  String
    url          String?
    deadline     DateTime
    priority     Priority   @default(NORMAL)
    difficulty   Difficulty @default(MEDIUM)
    statusId     Int
    status       Status     @relation(fields: [statusId], references: [id])
    comments     Comment[]
    assignedBy   User       @relation(fields: [assignedById], references: [id], name: "assignedBy")
    assignedById Int
    assignedTo   User       @relation(fields: [assignedToId], references: [id], name: "assignedTo")
    assignedToId Int
    kpis         TaskKPI[]
    step         Step?      @relation(fields: [stepId], references: [id])
    stepId       Int?

    @@index([assignedById])
    @@index([statusId])
    @@index([assignedToId])
    @@index([stepId])
}
//done
model KPI {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    tasks       TaskKPI[]
}

model TaskKPI {
    id          Int     @id @default(autoincrement())
    grade       Int
    description String?
    kpiId       Int
    KPI         KPI     @relation(fields: [kpiId], references: [id])
    taskId      Int
    task        Task    @relation(fields: [taskId], references: [id])

    @@index([kpiId])
    @@index([taskId])
}
// done
model Comment {
    id       Int    @id @default(autoincrement())
    content  String
    task     Task   @relation(fields: [taskId], references: [id])
    taskId   Int
    author   User   @relation(fields: [authorId], references: [id])
    authorId Int

    @@index([taskId])
    @@index([authorId])
}
//done
model Email {
    id                Int               @id @default(autoincrement())
    title             String
    body              String
    recruitmentStatus RecruitmentStatus
    cc                String
}

model Feedback {
    id    Int    @id @default(autoincrement())
    name  String
    email String
    title String
    body  String
}

enum GsLevel {
    INTERN
    COORDINATOR
    SPECIALIST
    VETERAN
    REPRESENTATIVE
    ORCHESTRATOR
}

enum GsStatus {
    ACTIVE
    FREEZE
    LEFT
}

enum Difficulty {
    LOW
    MEDIUM
    HIGH
    // TODO: Map each difficulty to a number value.
}

enum Priority {
    NORMAL
    IMPORTANT
    URGENT
}

enum RecruitmentStatus {
    APPLIED
    HR_APPROVED
    ORCH_APPROVED
    HR_INTERVIEW_APPROVED
    TECH_INTERVIEW_APPROVED
    REFUSED
    DONE
}

enum QuestionType {
    SHORT
    LONG
    FILE
    CHECKBOX
    RADIO
}

// tables will be used in the future
model Theme {
    id                   Int                   @id @default(autoincrement())
    name                 String
    description          String?
    startDate            DateTime?
    endDate              DateTime?
    enterpriseObjectives EnterpriseObjective[]
}

model EnterpriseObjective {
    id              Int              @id @default(autoincrement())
    name            String
    description     String?
    startDate       DateTime?
    endDate         DateTime?
    themeId         Int
    theme           Theme            @relation(fields: [themeId], references: [id])
    inChargeUserId  Int?
    inChargeUser    User?            @relation(fields: [inChargeUserId], references: [id])
    squadId         Int?
    squad           Squad?           @relation(fields: [squadId], references: [id])
    squadObjectives SquadObjective[]

    @@index([themeId])
    @@index([inChargeUserId])
    @@index([squadId])
}

model SquadObjective {
    id                    Int                 @id @default(autoincrement())
    name                  String
    description           String?
    startDate             DateTime?
    endDate               DateTime?
    enterpriseObjectiveId Int
    enterpriseObjective   EnterpriseObjective @relation(fields: [enterpriseObjectiveId], references: [id])
    inChargeUserId        Int?
    inChargeUser          User?               @relation(fields: [inChargeUserId], references: [id])
    squadId               Int?
    squad                 Squad?              @relation(fields: [squadId], references: [id])
    goals                 Goal[]

    @@index([enterpriseObjectiveId])
    @@index([inChargeUserId])
    @@index([squadId])
}

model Goal {
    id               Int            @id @default(autoincrement())
    name             String
    description      String?
    startDate        DateTime?
    endDate          DateTime?
    squadObjectiveId Int
    squadObjective   SquadObjective @relation(fields: [squadObjectiveId], references: [id])
    inChargeUserId   Int?
    inChargeUser     User?          @relation(fields: [inChargeUserId], references: [id])
    squadId          Int?
    squad            Squad?         @relation(fields: [squadId], references: [id])
    steps            Step[]

    @@index([squadObjectiveId])
    @@index([inChargeUserId])
    @@index([squadId])
}

model Step {
    id             Int       @id @default(autoincrement())
    name           String
    description    String?
    startDate      DateTime?
    endDate        DateTime?
    goalId         Int
    goal           Goal      @relation(fields: [goalId], references: [id])
    inChargeUserId Int?
    inChargeUser   User?     @relation(fields: [inChargeUserId], references: [id])
    squadId        Int?
    squad          Squad?    @relation(fields: [squadId], references: [id])
    tasks          Task[]

    @@index([goalId])
    @@index([inChargeUserId])
    @@index([squadId])
}
